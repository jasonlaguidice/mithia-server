version: '3.8'
services:
  # Login Server - Handles user authentication
  mithia-login:
    image: mithia-login-server:fixed
    restart: unless-stopped
    networks:
      mithia_network:
        ipv4_address: 172.20.0.10
    ports:
      - "2000:2000"
    environment:
      - LOGIN_SERVER_HOST=mithia-login
      - CHAR_SERVER_HOST=mithia-char
      - CHAR_SERVER_PORT=2005
      - DB_HOST=mithia-db
      - DB_PORT=3306
    volumes:
      - "./rtk/conf:/home/RTK/rtk/conf"
      - "./mithia-data/data/logs:/home/RTK/rtk/logs"
    depends_on:
      mithia-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Character Server - Manages character data and bridges login/map
  mithia-char:
    image: ghcr.io/jasonlaguidice/mithia-server/mithia-char-server:latest
    restart: unless-stopped
    networks:
      mithia_network:
        ipv4_address: 172.20.0.20
    ports:
      - "2005:2005"
    environment:
      - LOGIN_SERVER_HOST=mithia-login
      - LOGIN_SERVER_PORT=2000
      - MAP_SERVER_HOST=mithia-map
      - MAP_SERVER_PORT=2001
      - DB_HOST=mithia-db
      - DB_PORT=3306
    volumes:
      - "./rtk/conf:/home/RTK/rtk/conf"
      - "./mithia-data/data/logs:/home/RTK/rtk/logs"
    depends_on:
      mithia-db:
        condition: service_healthy
      mithia-login:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2005"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Map Server - Game world simulation (scalable)
  mithia-map:
    image: mithia-map-server:with-logs
    restart: unless-stopped
    networks:
      mithia_network:
        ipv4_address: 172.20.0.30
    ports:
      - "2001:2001"
    environment:
      - CHAR_SERVER_HOST=mithia-char
      - CHAR_SERVER_PORT=2005
      - DB_HOST=mithia-db
      - DB_PORT=3306
    env_file:
      - stack.env
    volumes:
      - "./rtk/conf:/home/RTK/rtk/conf"
      - "./rtk/db:/home/RTK/rtk/db"
      - "./rtklua:/home/RTK/rtklua"
      - "./rtkmaps:/home/RTK/rtkmaps"
      - "./mithia-data/data/logs:/home/RTK/rtk/logs"
    depends_on:
      mithia-char:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2001"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database Server - MySQL
  mithia-db:
    image: mysql/mysql-server:8.0
    restart: unless-stopped
    networks:
      mithia_network:
        ipv4_address: 172.20.0.5
    ports:
      - "3306:3306"
    env_file:
      - stack.env
    volumes:
      - "./mithia-data/database/scripts:/docker-entrypoint-initdb.d"
      - "./mithia-data/data/mysql:/var/lib/mysql"
      - "./mithia-data/data/backups:/backups"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  mithia_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# Usage Examples:
#
# Production deployment (uses pre-built images):
#   docker-compose -f docker-compose.production.yml up
#
# Development with local builds:
#   docker-compose -f docker-compose.microservices.yml up --build
#
# Scale map servers:
#   docker-compose -f docker-compose.production.yml up --scale mithia-map=3